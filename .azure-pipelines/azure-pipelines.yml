# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - develop

variables:
  - name: WINDOWS_BASEKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/irc_nas/18195/w_BaseKit_p_2021.4.0.3421_offline.exe
  - name: WINDOWS_HPC_TOOLKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/irc_nas/18247/w_HPCKit_p_2021.4.0.3340_offline.exe
  - name: LINUX_BASEKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/irc_nas/18236/l_BaseKit_p_2021.4.0.3422_offline.sh
  - name: LINUX_HPC_TOOLKIT_URL
    value: https://registrationcenter-download.intel.com/akdlm/irc_nas/18211/l_HPCKit_p_2021.4.0.3347_offline.sh
  - name: WINDOWS_BASEKIT_COMPONENTS
    value: intel.oneapi.win.dpcpp-compiler:intel.oneapi.win.mkl.devel
  - name: WINDOWS_HPC_TOOLKIT_COMPONENTS
    value: intel.oneapi.win.cpp-compiler:intel.oneapi.win.ifort-compiler
  - name: LINUX_BASEKIT_COMPONENTS
    value: intel.oneapi.lin.dpcpp-cpp-compiler:intel.oneapi.lin.mkl.devel
  - name: LINUX_HPC_TOOLKIT_COMPONENTS
    value: intel.oneapi.lin.dpcpp-cpp-compiler-pro:intel.oneapi.lin.ifort-compiler
  - name: LINUX_DPCPP_COMPILER
    value: intel.oneapi.lin.dpcpp-cpp-compiler
  - name: NETLIB_VERSION
    value: 3.10.0

jobs:
  # - job: oneMKL_DPCPP_win
  #   pool:
  #     vmImage: 'windows-2019'
  #   steps:
  #   - task: Cache@2
  #     inputs:
  #       path: C:\Program Files (x86)\Intel\oneAPI
  #       key: '"oneapi_components" | "$(Agent.OS)" | "$(WINDOWS_BASEKIT_URL)" | "$(WINDOWS_HPC_TOOLKIT_URL)"'
  #       cacheHitVar: ONEAPI_CACHE_RESTORED
    
  #   - task: Cache@2
  #     inputs:
  #       path: C:\netlib
  #       key: 'netlib-v2 | "$(Agent.OS)" | "$(NETLIB_VERSION)"'
  #       cacheHitVar: NETLIB_CACHE_RESTORED

  #   - script: |
  #       .azure-pipelines/scripts/install_windows_components.bat "$(WINDOWS_BASEKIT_URL)" "$(WINDOWS_BASEKIT_COMPONENTS)"
  #     displayName: Install basekit components
  #     condition: ne(variables.ONEAPI_CACHE_RESTORED, 'true')

  #   - script: |
  #       .azure-pipelines/scripts/install_windows_components.bat "$(WINDOWS_HPC_TOOLKIT_URL)" "$(WINDOWS_HPC_TOOLKIT_COMPONENTS)"
  #     displayName: Install hpc toolkit components
  #     condition: ne(variables.ONEAPI_CACHE_RESTORED, 'true')

  #   - script: choco install ninja
  #     displayName: Install ninja
    
  #   - script: |
  #       .azure-pipelines/scripts/install_netlib.bat $(NETLIB_VERSION)
  #     displayName: Install netlib
  #     condition: ne(variables.NETLIB_CACHE_RESTORED, 'true')

  #   - script: |
  #       ninja --version
  #       choco --version
  #       cmake --version
  #       call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
  #       dpcpp --version
  #       icl /QV
  #       ifort /QV
  #     displayName: Check installation

  #   - script: |
  #       .azure-pipelines/scripts/test_onemkl.bat blas
  #     displayName: Test oneMKL BLAS
  #     continueOnError: true
    
  #   - script: |
  #       .azure-pipelines/scripts/test_onemkl.bat lapack
  #     displayName: Test oneMKL LAPACK
  #     continueOnError: true

  #   - script: |
  #       .azure-pipelines/scripts/test_onemkl.bat rng
  #     displayName: Test oneMKL RNG
  #     continueOnError: true

  # - job: oneMKL_DPCPP_lnx
  #   pool:
  #     vmImage: 'ubuntu-20.04'
  #   steps:
  #   - task: Cache@2
  #     inputs:
  #       path: /opt/intel/oneapi
  #       key: '"oneapi_components" | "$(Agent.OS)" | "$(LINUX_BASEKIT_URL)" | "$(LINUX_HPC_TOOLKIT_URL)"'
  #       cacheHitVar: ONEAPI_CACHE_RESTORED
    
  #   - task: Cache@2
  #     inputs:
  #       path: /opt/netlib
  #       key: 'netlib-v2 | "$(Agent.OS)" | "$(NETLIB_VERSION)"'
  #       cacheHitVar: NETLIB_CACHE_RESTORED

  #   - script: |
  #       .azure-pipelines/scripts/install_linux_components.sh "$(LINUX_BASEKIT_URL)" "$(LINUX_BASEKIT_COMPONENTS)"
  #     displayName: Install basekit components
  #     condition: ne(variables.ONEAPI_CACHE_RESTORED, 'true')

  #   - script: |
  #       .azure-pipelines/scripts/install_linux_components.sh "$(LINUX_HPC_TOOLKIT_URL)" "$(LINUX_HPC_TOOLKIT_COMPONENTS)"
  #     displayName: Install hpc toolkit components
  #     condition: ne(variables.ONEAPI_CACHE_RESTORED, 'true')
    
  #   - script: |
  #       .azure-pipelines/scripts/install_netlib.sh $(NETLIB_VERSION)
  #     displayName: Install netlib
  #     condition: ne(variables.NETLIB_CACHE_RESTORED, 'true')

  #   - script: |
  #       cmake --version
  #       source /opt/intel/oneapi/setvars.sh
  #       dpcpp --version
  #       icc --version
  #       ifort --version
  #     displayName: Check installation

  #   - script: |
  #       .azure-pipelines/scripts/test_onemkl.sh blas
  #     displayName: Test oneMKL BLAS
  #     continueOnError: true
    
  #   - script: |
  #       .azure-pipelines/scripts/test_onemkl.sh lapack
  #     displayName: Test oneMKL LAPACK
  #     continueOnError: true

  #   - script: |
  #       .azure-pipelines/scripts/test_onemkl.sh rng
  #     displayName: Test oneMKL RNG
  #     continueOnError: true

  #   - task: PublishTestResults@2
  #     inputs:
  #       testResultsFormat: 'cTest'
  #       testResultsFiles: '**/ctest.log'
    - job: oneMKL_DPCPP_conan
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: Cache@2
        inputs:
          path: /opt/intel/oneapi
          key: '"oneapi_dpcpp_compiler" | "$(Agent.OS)" | "$(LINUX_BASEKIT_URL)" | "$(LINUX_DPCPP_COMPILER)"'
          cacheHitVar: DPCPP_CACHE_RESTORED
  
      - script: |
          .azure-pipelines/scripts/install_linux_components.sh "$(LINUX_BASEKIT_URL)" "$(LINUX_DPCPP_COMPILER)"
        displayName: Install basekit components
        condition: ne(variables.DPCPP_CACHE_RESTORED, 'true')

      - script: |
          sudo pip3 install conan
        displayName: Install Conan
      
      # - script: |
      #     .azure-pipelines/scripts/test_onemkl_conan.sh blas
      #   displayName: Test oneMKL BLAS
      #   continueOnError: true
